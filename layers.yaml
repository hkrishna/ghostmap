-
    name: earth

-
    name: landuse
    data: |
        function (json) {
            if (!json['landuse'] || !json['landuse'].features) {
                return null;
            }

            return {
                type: 'FeatureCollection',
                features: json['landuse'].features.sort(function(a, b) {
                    return (b.properties.area - a.properties.area);
                })
            };
        }

-
    name: water

-
    name: roads
    data: |
        function (json) {
            if (!json['roads'] || !json['roads'].features) {
                return null;
            }

            return {
                type: 'FeatureCollection',
                features: json['roads'].features.sort(function(a, b) {
                  return (a.properties.sort_key - b.properties.sort_key);
                })
            };
        }

-
    name: buildings

-
    name: ghostland
    data: |
        function (json) {
            var features = json['landuse'] && json['landuse'].features;
            if (!features) {
                return null;
            }

            var points = [];
            features.forEach(function(f) {
                if (f.geometry != null) {
                    f.geometry.coordinates.forEach(function(ring) {
                        ring.forEach(function(point) {
                            points.push({
                                geometry: {
                                    type: 'Point',
                                    coordinates: point
                                },
                                properties: f.properties

                            });
                        });
                    });
                }
            });

            return {
                type: 'FeatureCollection',
                features: points
            };
        }

-
    name: ghostbuildings
    # data: buildings
    data: |
        function test (json) {
            var features = json['buildings'] && json['buildings'].features;
            if (!features) {
                return null;
            }

            var points = [];
            features.forEach(function(f) {
                if (f.geometry != null) {
                    f.geometry.coordinates.forEach(function(ring) {
                        ring.forEach(function(point) {
                            points.push({
                                geometry: {
                                    type: 'Point',
                                    coordinates: point
                                },
                                properties: f.properties

                            });
                        });
                    });

                }
            });

            return {
                type: 'FeatureCollection',
                features: points
            };
        }
-
    name: pois

